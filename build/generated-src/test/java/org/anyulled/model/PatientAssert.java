package org.anyulled.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Patient} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PatientAssert extends AbstractAssert<PatientAssert, Patient> {

  /**
   * Creates a new <code>{@link PatientAssert}</code> to make assertions on actual Patient.
   * @param actual the Patient we want to make assertions on.
   */
  public PatientAssert(Patient actual) {
    super(actual, PatientAssert.class);
  }

  /**
   * An entry point for PatientAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPatient)</code> and get specific assertion with code completion.
   * @param actual the Patient we want to make assertions on.
   * @return a new <code>{@link PatientAssert}</code>
   */
  public static PatientAssert assertThat(Patient actual) {
    return new PatientAssert(actual);
  }

  /**
   * Verifies that the actual Patient's birthdate is equal to the given one.
   * @param birthdate the given birthdate to compare the actual Patient's birthdate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's birthdate is not equal to the given one.
   */
  public PatientAssert hasBirthdate(java.util.Date birthdate) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting birthdate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Date actualBirthdate = actual.getBirthdate();
    if (!Objects.areEqual(actualBirthdate, birthdate)) {
      failWithMessage(assertjErrorMessage, actual, birthdate, actualBirthdate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient's gender is equal to the given one.
   * @param gender the given gender to compare the actual Patient's gender to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's gender is not equal to the given one.
   */
  public PatientAssert hasGender(Gender gender) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gender of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Gender actualGender = actual.getGender();
    if (!Objects.areEqual(actualGender, gender)) {
      failWithMessage(assertjErrorMessage, actual, gender, actualGender);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient's infected is equal to the given one.
   * @param infected the given infected to compare the actual Patient's infected to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's infected is not equal to the given one.
   */
  public PatientAssert hasInfected(Boolean infected) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting infected of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualInfected = actual.getInfected();
    if (!Objects.areEqual(actualInfected, infected)) {
      failWithMessage(assertjErrorMessage, actual, infected, actualInfected);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient's lastname is equal to the given one.
   * @param lastname the given lastname to compare the actual Patient's lastname to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's lastname is not equal to the given one.
   */
  public PatientAssert hasLastname(String lastname) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastname of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLastname = actual.getLastname();
    if (!Objects.areEqual(actualLastname, lastname)) {
      failWithMessage(assertjErrorMessage, actual, lastname, actualLastname);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient's name is equal to the given one.
   * @param name the given name to compare the actual Patient's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's name is not equal to the given one.
   */
  public PatientAssert hasName(String name) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient's vaccinated is equal to the given one.
   * @param vaccinated the given vaccinated to compare the actual Patient's vaccinated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient's vaccinated is not equal to the given one.
   */
  public PatientAssert hasVaccinated(Boolean vaccinated) {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting vaccinated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualVaccinated = actual.getVaccinated();
    if (!Objects.areEqual(actualVaccinated, vaccinated)) {
      failWithMessage(assertjErrorMessage, actual, vaccinated, actualVaccinated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient is alive.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient is not alive.
   */
  public PatientAssert isAlive() {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isAlive()) {
      failWithMessage("\nExpecting that actual Patient is alive but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Patient is not alive.
   * @return this assertion object.
   * @throws AssertionError - if the actual Patient is alive.
   */
  public PatientAssert isNotAlive() {
    // check that actual Patient we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isAlive()) {
      failWithMessage("\nExpecting that actual Patient is not alive but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
