package org.anyulled.exceptions;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link MyPatientException} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MyPatientExceptionAssert extends AbstractAssert<MyPatientExceptionAssert, MyPatientException> {

  /**
   * Creates a new <code>{@link MyPatientExceptionAssert}</code> to make assertions on actual MyPatientException.
   * @param actual the MyPatientException we want to make assertions on.
   */
  public MyPatientExceptionAssert(MyPatientException actual) {
    super(actual, MyPatientExceptionAssert.class);
  }

  /**
   * An entry point for MyPatientExceptionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMyPatientException)</code> and get specific assertion with code completion.
   * @param actual the MyPatientException we want to make assertions on.
   * @return a new <code>{@link MyPatientExceptionAssert}</code>
   */
  public static MyPatientExceptionAssert assertThat(MyPatientException actual) {
    return new MyPatientExceptionAssert(actual);
  }

  /**
   * Verifies that the actual MyPatientException's cause is equal to the given one.
   * @param cause the given cause to compare the actual MyPatientException's cause to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyPatientException's cause is not equal to the given one.
   */
  public MyPatientExceptionAssert hasCause(Throwable cause) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cause of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Throwable actualCause = actual.getCause();
    if (!Objects.areEqual(actualCause, cause)) {
      failWithMessage(assertjErrorMessage, actual, cause, actualCause);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's localizedMessage is equal to the given one.
   * @param localizedMessage the given localizedMessage to compare the actual MyPatientException's localizedMessage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyPatientException's localizedMessage is not equal to the given one.
   */
  public MyPatientExceptionAssert hasLocalizedMessage(String localizedMessage) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting localizedMessage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLocalizedMessage = actual.getLocalizedMessage();
    if (!Objects.areEqual(actualLocalizedMessage, localizedMessage)) {
      failWithMessage(assertjErrorMessage, actual, localizedMessage, actualLocalizedMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's message is equal to the given one.
   * @param message the given message to compare the actual MyPatientException's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyPatientException's message is not equal to the given one.
   */
  public MyPatientExceptionAssert hasMessage(String message) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's stackTrace contains the given StackTraceElement elements.
   * @param stackTrace the given elements that should be contained in actual MyPatientException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's stackTrace does not contain all given StackTraceElement elements.
   */
  public MyPatientExceptionAssert hasStackTrace(StackTraceElement... stackTrace) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).contains(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's stackTrace contains <b>only<b> the given StackTraceElement elements and nothing else in whatever order.
   * 
   * @param stackTrace the given elements that should be contained in actual MyPatientException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's stackTrace does not contain all given StackTraceElement elements and nothing else.
   */
  public MyPatientExceptionAssert hasOnlyStackTrace(StackTraceElement... stackTrace) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).containsOnly(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's stackTrace does not contain the given StackTraceElement elements.
   *
   * @param stackTrace the given elements that should not be in actual MyPatientException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's stackTrace contains any given StackTraceElement elements.
   */
  public MyPatientExceptionAssert doesNotHaveStackTrace(StackTraceElement... stackTrace) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).doesNotContain(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException has no stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's stackTrace is not empty.
   */
  public MyPatientExceptionAssert hasNoStackTrace() {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have stackTrace but had :\n  <%s>";
    
    // check
    if (actual.getStackTrace().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getStackTrace()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual MyPatientException's suppressed contains the given Throwable elements.
   * @param suppressed the given elements that should be contained in actual MyPatientException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's suppressed does not contain all given Throwable elements.
   */
  public MyPatientExceptionAssert hasSuppressed(Throwable... suppressed) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).contains(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's suppressed contains <b>only<b> the given Throwable elements and nothing else in whatever order.
   * 
   * @param suppressed the given elements that should be contained in actual MyPatientException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's suppressed does not contain all given Throwable elements and nothing else.
   */
  public MyPatientExceptionAssert hasOnlySuppressed(Throwable... suppressed) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).containsOnly(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException's suppressed does not contain the given Throwable elements.
   *
   * @param suppressed the given elements that should not be in actual MyPatientException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's suppressed contains any given Throwable elements.
   */
  public MyPatientExceptionAssert doesNotHaveSuppressed(Throwable... suppressed) {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).doesNotContain(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MyPatientException has no suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual MyPatientException's suppressed is not empty.
   */
  public MyPatientExceptionAssert hasNoSuppressed() {
    // check that actual MyPatientException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have suppressed but had :\n  <%s>";
    
    // check
    if (actual.getSuppressed().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getSuppressed()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
