package org.anyulled.service;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link PatientService} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PatientServiceAssert extends AbstractAssert<PatientServiceAssert, PatientService> {

  /**
   * Creates a new <code>{@link PatientServiceAssert}</code> to make assertions on actual PatientService.
   * @param actual the PatientService we want to make assertions on.
   */
  public PatientServiceAssert(PatientService actual) {
    super(actual, PatientServiceAssert.class);
  }

  /**
   * An entry point for PatientServiceAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPatientService)</code> and get specific assertion with code completion.
   * @param actual the PatientService we want to make assertions on.
   * @return a new <code>{@link PatientServiceAssert}</code>
   */
  public static PatientServiceAssert assertThat(PatientService actual) {
    return new PatientServiceAssert(actual);
  }

  /**
   * Verifies that the actual PatientService's patient is equal to the given one.
   * @param patient the given patient to compare the actual PatientService's patient to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PatientService's patient is not equal to the given one.
   */
  public PatientServiceAssert hasPatient(String patient) {
    // check that actual PatientService we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting patient of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPatient = actual.getPatient();
    if (!Objects.areEqual(actualPatient, patient)) {
      failWithMessage(assertjErrorMessage, actual, patient, actualPatient);
    }

    // return the current assertion for method chaining
    return this;
  }

}
